#!/usr/bin/env node

var marked = require('marked');
var yaml = require('js-yaml');
var async = require('async');


marked.setOptions({
  renderer: new marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: true,
  smartLists: true,
  smartypants: false
});


var fs = require('fs');
var path = require('path');
var files = fs.readdirSync(__dirname + '/rules').map(function (file) {
  return path.join(__dirname, '/rules', file);
});

async.map(files, function (file, callback) {

  fs.readFile(file, 'utf8', function (err, content) {
    if (err) return callback(err);
    var meta = {};

    if (content.split('\n')[0] === '---') {
      var split = content.split('---');
      meta = yaml.safeLoad(split[1]);
      content = split.slice(2).join('---');
    }

    var lex = marked.lexer(content);

    var title = lex.filter(function (t) {
      return t.type === 'heading';
    })[0].text;

    var descriptionMD = lex.filter(function (t) {
      return !~['heading', 'code'].indexOf(t.type);
    });
    descriptionMD.links = {};
    var description = marked.parser(descriptionMD);

    var code = lex.filter(function (t) {
      return t.type === 'code';
    })[0].text;

    var result = {
      title:       title || meta.title,
      categories:  meta.categories || ['default'],
      description: description,
      code:        code
    };

    callback(null, result);
  });
}, function (err, results) {
  if (err) {
    console.log(err.stack);
    process.exit(1);
  }
  console.log('all good!');
  fs.writeFileSync(__dirname + '/rules.json', JSON.stringify(results, null, 2));
  process.exit(0);
});